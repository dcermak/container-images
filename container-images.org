# -*- org-confirm-babel-evaluate: nil; -*-
#+AUTHOR: Dan ÄŒermÃ¡k
#+DATE: March 23, 2025
#+EMAIL: dcermak@suse.com
#+TITLE: Container und Container Images
#+SUBTITLE: Was verbirgt sich dahinter?

#+REVEAL_ROOT: ./node_modules/reveal.js/
#+REVEAL_THEME: simple
#+REVEAL_PLUGINS: (highlight notes history)
#+OPTIONS: toc:nil
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+REVEAL_INIT_OPTIONS: transition: 'none', hash: true
#+OPTIONS: num:nil toc:nil center:nil reveal_title_slide:nil
#+REVEAL_EXTRA_CSS: ./node_modules/@fortawesome/fontawesome-free/css/all.min.css
#+REVEAL_EXTRA_CSS: ./custom-style.css
#+REVEAL_HIGHLIGHT_CSS: ./node_modules/reveal.js/plugin/highlight/zenburn.css

#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2>
#+REVEAL_TITLE_SLIDE: <p class="subtitle" style="color: Gray;">%s</p>
#+REVEAL_TITLE_SLIDE: <p class="author">%a</p>
#+REVEAL_TITLE_SLIDE: <div style="float:left"><a href="https://chemnitzer.linux-tage.de/2025/" target="_blank"><img src="./media/clt-logo_2025_en.svg" height="50px"/></a></div>
#+REVEAL_TITLE_SLIDE: <div style="float:right;font-size:35px;"><p xmlns:dct="http://purl.org/dc/terms/" xmlns:cc="http://creativecommons.org/ns#"><a href="https://creativecommons.org/licenses/by/4.0" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">
#+REVEAL_TITLE_SLIDE: CC BY 4.0 <i class="fab fa-creative-commons"></i> <i class="fab fa-creative-commons-by"></i></a></p></div>

* ~who -u~

Dan ÄŒermÃ¡k

@@html: <div style="float:center">@@
@@html: <table class="who-table">@@
@@html: <tr><td><i class="fab fa-suse"></i></td><td> Software Developer @SUSE</td></tr>@@
@@html: <tr><td><i class="fab fa-fedora"></i></td><td> i3 SIG, Package maintainer</td></tr>@@
@@html: <tr><td><i class="far fa-heart"></i></td><td> Developer Tools, Testing and Documentation, Home Automation</td></tr>@@
@@html: <tr></tr>@@
@@html: <tr></tr>@@
@@html: <tr><td><i class="fa-solid fa-globe"></i></td><td> <a href="https://dancermak.name/">https://dancermak.name</a></td></tr>@@
@@html: <tr><td><i class="fab fa-github"></i></td><td> <a href="https://github.com/dcermak/">dcermak</a> </td></tr>@@
@@html: <tr><td><i class="fab fa-mastodon"></i></td><td> <a href="https://mastodon.social/@Defolos">@Defolos@mastodon.social</a></td></tr>@@
@@html: </table>@@
@@html: </div>@@


* TODO Agenda


* Software Delivery
#+begin_notes
- dependencies suck, dependency handling sucks, don't wanna handle 20 different library versions
- 
#+end_notes

#+ATTR_REVEAL: :frag (appear)
- dependencies suck \rightarrow bundle everything
- Can't we just ship everything?
- yes, but VMs suck as well ðŸ« 


** Let's build a container

#+begin_notes
- build everything locally or in a pre-installed VM
- tar the whole thing
- clean up everything (logs, temporary build deps, etc)
#+end_notes

#+ATTR_REVEAL: :frag (appear)
1. Create a chroot: ~rsync -avz --exclude=/sysroot/ / /sysroot/~
2. build your app
3. ~tar -czvf my-app.tar.gz /sysroot~
4. clean the archive of everything unneeded


** Let's run the container

#+ATTR_REVEAL: :frag (appear)
1. ~tar -xzvf my-app.tar.gz -C /path/to/app~
2. ~chroot /path/to/app /usr/local/bin/my-app~


** Is that it?

#+ATTR_REVEAL: :frag (appear)
- inconvenient build process
- no upgrade path
- data sharing?
- no security


** Linux Namespaces
#+begin_notes
- introduced in 2002 (kernel 2.4), more added in 2006
- container support finished in 2013: user namespace with kernel 3.8
- user: separate user ids of namespace & host, map uids between host & namespace
  \Rightarrow uid 0 in namespace is user who created namespace
  (\rightarrow see also =/etc/subuid=)
- mnt: mount namespace, isolated mounts
- pid: Process ID isolation, process that "created" the namespace gets PID 1 and
  all other processes become its children (also of sub-namespaces)
- net: each net inerface in one namespace
- ipc: restrict SysV style IPC
- uts - unix time sharing: set hostname & domainname
- cgroup (added in 4.6): hide cgroup path, i.e. process only sees relative
  cgroup path of the namespace and no others
- time (added in 5.6): set different system time
#+end_notes

#+ATTR_REVEAL: :frag (appear)
- kernel level resource isolation

#+ATTR_REVEAL: :frag (appear)
available namespaces:

#+ATTR_REVEAL: :frag (appear)
- user
- mnt
- pid
- net
- ipc
- uts
- cgroup
- time

#+REVEAL: split

Try it:
#+ATTR_REVEAL: :frag (appear) :code_attribs data-line-numbers='1-3|4-5|6-9'
#+begin_src shell
$ unshare --user --map-root-user \
      --pid --fork --mount-proc \
      /bin/bash
# whoami
root
# ps -a
    PID TTY          TIME CMD
      1 pts/8    00:00:00 bash
    104 pts/8    00:00:00 ps
#+end_src


** cgroups

#+begin_notes
- started in 2006, merged in 2008 (2.6.24)
- redesigned to v2 in 2016 (4.5)

- resource limits like I/O, FS caches, CPU quota, open files
- process priorization
- measure whole group resource usage & freeze/restart it

- nowadays used by userspace memory killers
- modern DEs put each process into a cgroup \rightarrow for oom-killers
#+end_notes

#+ATTR_REVEAL: :frag (appear)
- apply resource limits to processes
- measure resource usage

#+ATTR_REVEAL: :frag (appear) :code_attribs data-line-numbers='1|2|3-4'
#+begin_src shell
# cgcreate -g memory:memlimit
# cgset -r memory.max=1K memlimit
# cgexec -g memory:memlimit ls -al
Killed
#+end_src


** Are we there yet?

#+ATTR_REVEAL: :frag (appear)
What do we have?
#+ATTR_REVEAL: :frag (appear)
great process isolation

#+ATTR_REVEAL: :frag (appear)
What's lacking?
#+ATTR_REVEAL: :frag (appear)
- standardized build process
- distribution mechanism


* Introducing: Docker

#+begin_notes
- solve the redistribution & build process
#+end_notes

#+ATTR_REVEAL: :frag (appear)
@@html:<img src="./media/Docker_(container_engine)_logo.svg"/>@@

#+ATTR_REVEAL: :frag (appear)
1. Docker registry
2. ~docker build~


** TODO Docker Registry

*maybe an image here?*

#+begin_notes
- initially there was only [[https://hub.docker.com][Docker Hub]]
- repository: name of the image
- tag: something like a version, but really a free form field
  only special value is =:latest=, pulled by default
  you can have multiple images with the same tag ðŸ˜’
- digest: sha256 or sha512 hash of the image manifest

Digests:
some background: OCI registries return to =GET
/v2/<repo>/manifests/<tag>= either a =distribution.manifest= or a
=distribution.manifest.list= (that's a list of =distribution.manifest=), the digest
of an image is the sha256sum/sha512sum of the =distribution.manifest=
#+end_notes

#+ATTR_REVEAL: :frag (appear)
- central image storage
- images identified via =repository:tag@digest=
- nowadays many registries exist:

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
docker pull registry.opensuse.org/opensuse/leap:15.6@sha256:e7bcb978edf8bbf26aa8bbe72a19c10a01c960eb4add5ef516f8038926efd719
#+end_src


** Container Image Build

#+begin_notes
- fix the inconvenient build process
- docker build standardized & simplified the image build process via the
  =Dockerfile=
- syntax is: =INSTRUCTION <value>=
- image build starts =FROM= an image specified using the same format as the
  registry
- each instruction creates a layer, changes put on top, build process relies
  heavily on caching
#+end_notes

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
docker build .
#+end_src

#+ATTR_REVEAL: :frag (appear) :code_attribs data-line-numbers='1|3|5|6|7'
#+begin_src Dockerfile
FROM registry.opensuse.org/opensuse/tumbleweed

RUN zypper -n in emacs

ENV EMACS_VERSION=30.1
USER emacs
CMD ["/usr/bin/emacs", "-q"]
#+end_src

** UnionFS

#+begin_notes
- final image constructed from individual layers
- file precedence: "highest directory" over "lowest"
- file removal: via whiteout files,
  in overlayFS: character special file (device 0, 0), create via =mknod $path c 0 0=
  oci tar archives prepend =.wh.=, empty file
- directory removal: whiteout file
  oci tar archives: =dir/.wh..wh..opq= empty file
  in overlayFS: character special file in upper dir (again created via =mknod=)

catches:
- you can never truly delete files
- editing a file creates a full copy (unionFS works on a file level)
- certain operations not atomic
- directory renames are very ugly (delete + full copy)

- try it locally with OverlayFS on Linux,
  lowerdir: read only layers
  upperdir: rw top dir (= container dir)
  workdir: used for internal purposes (CoW)
#+end_notes

#+ATTR_REVEAL: :frag (appear)
@@html:<img src="./media/overlays.svg"/>@@

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
mount -t overlay overlay \
      -o lowerdir=Layer 3:Layer 2:Layer 1,\
         upperdir=Container,workdir=/work/ \
           merged
#+end_src


** Launching a Container

#+ATTR_REVEAL: :frag (appear)
1. Lookup image locally
2. (optionally) pull the image
3. write layers to disk & setup unionfs
4. setup namespaces & cgroups
5. setup networking
6. launch entrypoint using =runc= / =crun= / =$runtime=


** Volumes

** Entrypoints

** Networking

** Paradigms

- one entrypoint \Rightarrow one binary
- configure via env vars
- volumes for persistent data


** Podman


* Kubernetes

* Questions?

#+ATTR_REVEAL: :frag (appear)
Answers!
